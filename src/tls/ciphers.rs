use tokio_rustls::rustls::CipherSuite;

// TLS_AES_256_GCM_SHA384         TLSv1.3 Kx=any      Au=any   Enc=AESGCM(256)            Mac=AEAD
// TLS_CHACHA20_POLY1305_SHA256   TLSv1.3 Kx=any      Au=any   Enc=CHACHA20/POLY1305(256) Mac=AEAD
// TLS_AES_128_GCM_SHA256         TLSv1.3 Kx=any      Au=any   Enc=AESGCM(128)            Mac=AEAD
// ECDHE-ECDSA-AES256-GCM-SHA384  TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AESGCM(256)            Mac=AEAD
// ECDHE-RSA-AES256-GCM-SHA384    TLSv1.2 Kx=ECDH     Au=RSA   Enc=AESGCM(256)            Mac=AEAD
// DHE-RSA-AES256-GCM-SHA384      TLSv1.2 Kx=DH       Au=RSA   Enc=AESGCM(256)            Mac=AEAD
// ECDHE-ECDSA-CHACHA20-POLY1305  TLSv1.2 Kx=ECDH     Au=ECDSA Enc=CHACHA20/POLY1305(256) Mac=AEAD
// ECDHE-RSA-CHACHA20-POLY1305    TLSv1.2 Kx=ECDH     Au=RSA   Enc=CHACHA20/POLY1305(256) Mac=AEAD
// DHE-RSA-CHACHA20-POLY1305      TLSv1.2 Kx=DH       Au=RSA   Enc=CHACHA20/POLY1305(256) Mac=AEAD
// ECDHE-ECDSA-AES128-GCM-SHA256  TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AESGCM(128)            Mac=AEAD
// ECDHE-RSA-AES128-GCM-SHA256    TLSv1.2 Kx=ECDH     Au=RSA   Enc=AESGCM(128)            Mac=AEAD
// DHE-RSA-AES128-GCM-SHA256      TLSv1.2 Kx=DH       Au=RSA   Enc=AESGCM(128)            Mac=AEAD
// ECDHE-ECDSA-AES256-SHA384      TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AES(256)               Mac=SHA384
// ECDHE-RSA-AES256-SHA384        TLSv1.2 Kx=ECDH     Au=RSA   Enc=AES(256)               Mac=SHA384
// DHE-RSA-AES256-SHA256          TLSv1.2 Kx=DH       Au=RSA   Enc=AES(256)               Mac=SHA256
// ECDHE-ECDSA-AES128-SHA256      TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AES(128)               Mac=SHA256
// ECDHE-RSA-AES128-SHA256        TLSv1.2 Kx=ECDH     Au=RSA   Enc=AES(128)               Mac=SHA256
// DHE-RSA-AES128-SHA256          TLSv1.2 Kx=DH       Au=RSA   Enc=AES(128)               Mac=SHA256
// RSA-PSK-AES256-GCM-SHA384      TLSv1.2 Kx=RSAPSK   Au=RSA   Enc=AESGCM(256)            Mac=AEAD
// DHE-PSK-AES256-GCM-SHA384      TLSv1.2 Kx=DHEPSK   Au=PSK   Enc=AESGCM(256)            Mac=AEAD
// RSA-PSK-CHACHA20-POLY1305      TLSv1.2 Kx=RSAPSK   Au=RSA   Enc=CHACHA20/POLY1305(256) Mac=AEAD
// DHE-PSK-CHACHA20-POLY1305      TLSv1.2 Kx=DHEPSK   Au=PSK   Enc=CHACHA20/POLY1305(256) Mac=AEAD
// ECDHE-PSK-CHACHA20-POLY1305    TLSv1.2 Kx=ECDHEPSK Au=PSK   Enc=CHACHA20/POLY1305(256) Mac=AEAD
// AES256-GCM-SHA384              TLSv1.2 Kx=RSA      Au=RSA   Enc=AESGCM(256)            Mac=AEAD
// PSK-AES256-GCM-SHA384          TLSv1.2 Kx=PSK      Au=PSK   Enc=AESGCM(256)            Mac=AEAD
// PSK-CHACHA20-POLY1305          TLSv1.2 Kx=PSK      Au=PSK   Enc=CHACHA20/POLY1305(256) Mac=AEAD
// RSA-PSK-AES128-GCM-SHA256      TLSv1.2 Kx=RSAPSK   Au=RSA   Enc=AESGCM(128)            Mac=AEAD
// DHE-PSK-AES128-GCM-SHA256      TLSv1.2 Kx=DHEPSK   Au=PSK   Enc=AESGCM(128)            Mac=AEAD
// AES128-GCM-SHA256              TLSv1.2 Kx=RSA      Au=RSA   Enc=AESGCM(128)            Mac=AEAD
// PSK-AES128-GCM-SHA256          TLSv1.2 Kx=PSK      Au=PSK   Enc=AESGCM(128)            Mac=AEAD
// AES256-SHA256                  TLSv1.2 Kx=RSA      Au=RSA   Enc=AES(256)               Mac=SHA256
// AES128-SHA256                  TLSv1.2 Kx=RSA      Au=RSA   Enc=AES(128)               Mac=SHA256

// TLS_NULL_WITH_NULL_NULL => 0x0000,  --> Not supported
// TLS_PSK_WITH_AES_128_GCM_SHA256 => 0x00a8,  --> PSK-AES128-GCM-SHA256
// TLS_PSK_WITH_AES_256_GCM_SHA384 => 0x00a9,  --> PSK-AES256-GCM-SHA384
// TLS_EMPTY_RENEGOTIATION_INFO_SCSV => 0x00ff, --> Not supported
// TLS13_AES_128_GCM_SHA256 => 0x1301,  --> TLS_AES_128_GCM_SHA256
// TLS13_AES_256_GCM_SHA384 => 0x1302,  --> TLS_AES_256_GCM_SHA384
// TLS13_CHACHA20_POLY1305_SHA256 => 0x1303,  --> TLS_CHACHA20_POLY1305_SHA256
// TLS13_AES_128_CCM_SHA256 => 0x1304,  --> Not supported
// TLS13_AES_128_CCM_8_SHA256 => 0x1305,  --> Not supported
// TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA => 0xc009,  --> ECDHE-ECDSA-AES128-SHA256
// TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA => 0xc00a,  --> ECDHE-ECDSA-AES256-SHA384
// TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA => 0xc013,  --> ECDHE-RSA-AES128-SHA256
// TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA => 0xc014,  --> ECDHE-RSA-AES256-SHA384
// TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 => 0xc023,  --> ECDHE-ECDSA-AES128-GCM-SHA256
// TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 => 0xc024,  --> ECDHE-ECDSA-AES256-GCM-SHA384
// TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 => 0xc027,  --> ECDHE-RSA-AES128-GCM-SHA256
// TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 => 0xc028,  --> ECDHE-RSA-AES256-GCM-SHA384
// TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 => 0xc02b,  --> ECDHE-ECDSA-AES128-GCM-SHA256
// TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 => 0xc02c,  --> ECDHE-ECDSA-AES256-GCM-SHA384
// TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 => 0xc02f,  --> ECDHE-RSA-AES128-GCM-SHA256
// TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 => 0xc030,  --> ECDHE-RSA-AES256-GCM-SHA384
// TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 => 0xcca8,  --> ECDHE-RSA-CHACHA20-POLY1305
// TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 => 0xcca9,  --> ECDHE-ECDSA-CHACHA20-POLY1305


// Convert a string to a CipherSuite
pub fn str_to_cipher_suite(s: &str) -> Option<CipherSuite> {
    match s {
        // We will not use Pre-Shared Key (PSK) ciphers, so we will not include them
        // "PSK-AES128-GCM-SHA256" => Some(CipherSuite::TLS_PSK_WITH_AES_128_GCM_SHA256),
        // "PSK-AES256-GCM-SHA384" => Some(CipherSuite::TLS_PSK_WITH_AES_256_GCM_SHA384),
        "TLS_AES_128_GCM_SHA256" => Some(CipherSuite::TLS13_AES_128_GCM_SHA256),
        "TLS_AES_256_GCM_SHA384" => Some(CipherSuite::TLS13_AES_256_GCM_SHA384),
        "TLS_CHACHA20_POLY1305_SHA256" => Some(CipherSuite::TLS13_CHACHA20_POLY1305_SHA256),
        "ECDHE-ECDSA-AES128-SHA256" => Some(CipherSuite::TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256),
        "ECDHE-ECDSA-AES256-SHA384" => Some(CipherSuite::TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384),
        "ECDHE-RSA-AES128-SHA256" => Some(CipherSuite::TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256),
        "ECDHE-RSA-AES256-SHA384" => Some(CipherSuite::TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384),
        "ECDHE-ECDSA-AES128-GCM-SHA256" => Some(CipherSuite::TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256),
        "ECDHE-ECDSA-AES256-GCM-SHA384" => Some(CipherSuite::TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384),
        "ECDHE-RSA-AES128-GCM-SHA256" => Some(CipherSuite::TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256),
        "ECDHE-RSA-AES256-GCM-SHA384" => Some(CipherSuite::TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384),
        "ECDHE-RSA-CHACHA20-POLY1305" => Some(CipherSuite::TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256),
        "ECDHE-ECDSA-CHACHA20-POLY1305" => Some(CipherSuite::TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256),
        _ => None,
    }
}
